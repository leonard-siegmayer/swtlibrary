server.port=8083

# Disable exception during startup --> https://github.com/pgjdbc/pgjdbc/issues/1102
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# spring.datasource.url, spring.datasource.username and spring.datasource.password are development configurations
spring.datasource.url=jdbc:mariadb://localhost:3306/TestDB?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=swt2019
spring.datasource.initialization-mode=always
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.jpa.hibernate.ddl-auto=create
spring.datasource.continue-on-error=false

## Elasticsearch
# es.url is a development configuration
es.url=localhost
es.port=9200
es.port.node=9300
es.protocol=http
es.request.timeout=30s
es.indexname.media=media

## Authentication
# frontend.url, gitlab.clientid and gitlab.clientsecret are development configurations
frontend.url=http\://master-swtlibrary-1315.runner.swt.uni-bamberg.de
auth.endpoint=/auth/login
gitlab.clientid=d094af98ffb66ca865a4ecc67de6320b7c6304b8665c59b88f23e4bd728e5366
gitlab.clientsecret=8f0d2c06c7a03d0717cb8823461409cbd3155491cffca662b5cd42594101d06c
gitlab.grant_type=authorization_code
gitlab.accesstoken.uri=https\://gitlab.rz.uni-bamberg.de/oauth/token
gitlab.userinfo.uri=https\://gitlab.rz.uni-bamberg.de/oauth/userinfo
gitlab.issuer=https\://gitlab.rz.uni-bamberg.de
gitlab.jwk.uri=https\://gitlab.rz.uni-bamberg.de/oauth/discovery/keys

## Email
spring.mail.host=smtp.office365.com
spring.mail.port=587
spring.mail.username=swtlib@example.com
spring.mail.password=mypassword
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
mail.swtlib.admin.email=admin@example.com
mail.swtlib.signature=SWT Library Staff
mail.swtlib.university.library.email=unibib@example.com
# This E-mail is for notification of updates and changes of the wishlist
mail.switlib.wishlist.updateMail=verwaltung@example.com 
# how long an emailEntry will be kept in the EmailRepository (days)
mail.db.maxage=60

## Scheduling
cron.mail.expirationWarning=0 45 22 * * ?
cron.mail.overdueWarning=0 0 9 * * ?
cron.mail.overdueInfo=0 5 9 * * ?
cron.mail.janitor=0 23 2 * * ?

# how much time someone has to claim his reservation after a book has been returned (hours)
reservation.available.max_hours=36

## Business logic
# The maximum amount of days a medium can be borrowed regularly:
borrowings.max_days=28
# The max amount of extension days:
borrowing.max_extDays = 7
# Defines borrowing expiration window as: dueDate - expiration.days:
expiration.days=5
# The overdue window after which an item is considered to be overdue critically:
overdue.days=7

